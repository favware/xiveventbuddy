generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum EventInterval {
    WEEKLY                              @map("weekly")
    ONCE_EVERY_OTHER_WEEK               @map("once_every_other_week")
    MONTHLY                             @map("monthly")
    ONE_BEFORE_LAST_FRIDAY_OF_THE_MONTH @map("one_before_last_friday_of_the_month")

    @@map("event_interval")
}

enum EventVariant {
    NORMAL          @map("normal")
    OCCULT_CRESCENT @map("occult_crescent")

    @@map("event_variant")
}

enum Roles {
    AllRounder     @map("all_rounder")
    PhantomJob     @map("phantom_job")
    Healer         @map("healer")
    MeleeDPS       @map("melee_dps")
    MagicRangedDPS @map("magic_ranged_dps")
    PhysRangedDPS  @map("phys_ranged_dps")
    Tank           @map("tank")
    Absence        @map("absence")
    Bench          @map("bench")
    Late           @map("late")
    Tentative      @map("tentative")

    @@map("roles")
}

enum Jobs {
    AllRounder        @map("all_rounder")
    Paladin           @map("paladin")
    Warrior           @map("warrior")
    Dragoon           @map("dragoon")
    Monk              @map("monk")
    Bard              @map("bard")
    BlackMage         @map("black_mage")
    Summoner          @map("summoner")
    Scholar           @map("scholar")
    WhiteMage         @map("white_mage")
    Ninja             @map("ninja")
    DarkKnight        @map("dark_knight")
    Machinist         @map("machinist")
    Astrologian       @map("astrologian")
    Samurai           @map("samurai")
    RedMage           @map("red_mage")
    BlueMage          @map("blue_mage")
    Gunbreaker        @map("gunbreaker")
    Dancer            @map("dancer")
    Reaper            @map("reaper")
    Sage              @map("sage")
    Viper             @map("viper")
    Pictomancer       @map("pictomancer")
    // Beastmaster       @map("beastmaster") TODO: To be added in later patch content
    PhantomBard       @map("phantom_bard")
    PhantomBerserker  @map("phantom_berserker")
    PhantomCannoneer  @map("phantom_cannoneer")
    PhantomChemist    @map("phantom_chemist")
    PhantomFreelancer @map("phantom_freelancer")
    PhantomGeomancer  @map("phantom_geomancer")
    PhantomKnight     @map("phantom_knight")
    PhantomMonk       @map("phantom_monk")
    PhantomOracle     @map("phantom_oracle")
    PhantomRanger     @map("phantom_ranger")
    PhantomSamurai    @map("phantom_samurai")
    PhantomThief      @map("phantom_thief")
    PhantomTimeMage   @map("phantom_timemage")

    @@map("jobs")
}

model EventManagers {
    id        String   @id @default(cuid())
    discordId String   @unique @map("discord_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("event_managers")
}

model Event {
    id          String         @id @default(cuid())
    name        String
    bannerImage String?        @map("banner_image")
    channelId   String         @map("channel_id")
    description String?
    duration    Int
    guildId     String         @map("guild_id")
    interval    EventInterval?
    leader      String
    roleToPing  String?        @map("role_to_ping")
    rolesToPing String[]       @map("roles_to_ping")
    createdAt   DateTime       @default(now()) @map("created_at")
    updatedAt   DateTime       @updatedAt @map("updated_at")
    instance    EventInstance?
    variant     EventVariant   @default(NORMAL) @map("event_variant")

    @@map("events")
}

model EventInstance {
    id             String        @id @default(cuid())
    dateTime       DateTime      @map("date_time")
    messageId      String?       @map("message_id")
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime      @updatedAt @map("updated_at")
    event          Event         @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    eventId        String        @unique @map("event_id")
    discordEventId String?       @map("discord_event_id")
    participants   Participant[]

    @@map("event_instances")
}

model Participant {
    id              String        @id @default(cuid())
    discordId       String        @map("discord_id")
    job             Jobs?
    role            Roles
    signupOrder     Int           @map("signup_order")
    createdAt       DateTime      @default(now()) @map("created_at")
    updatedAt       DateTime      @updatedAt @map("updated_at")
    eventInstanceId String        @map("event_instance_id")
    eventInstance   EventInstance @relation(fields: [eventInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@unique([eventInstanceId, discordId])
    @@map("participants")
}
